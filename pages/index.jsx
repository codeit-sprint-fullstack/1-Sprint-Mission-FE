import Head from "next/head";
import { useEffect, useState } from "react";
import useWindowResize from "@/hooks/useWindowResize";
import Product from "@/components/ProductList";
import Pagination from "@/components/Pagination";
import SearchBar from "@/components/SearchBar";
import * as api from "@/pages/api/products";

import {
  dehydrate,
  HydrationBoundary,
  QueryClient,
  useQuery,
} from "@tanstack/react-query";
import styles from "@/styles/Home.module.css";

export async function getStaticProps() {
  const queryClient = new QueryClient();

  const productsQuery = {
    orderBy: "recent",
    page: 1,
    pageSize: 10,
    keyword: "",
  };

  const bestProductsQuery = {
    orderBy: "favoriteCount",
    pageSize: 4,
  };

  await queryClient.prefetchQuery({
    queryKey: ["bestProducts"],
    queryFn: () => api.getProducts(bestProductsQuery),
  });

  await queryClient.prefetchQuery({
    queryKey: ["Products"],
    queryFn: () => api.getProducts(productsQuery),
  });

  return {
    props: {
      dehydratedState: dehydrate(queryClient),
      productsQuery,
      bestProductsQuery,
    },
  };
}

function HomeRouter({ dehydratedState, productsQuery, bestProductsQuery }) {
  return (
    <HydrationBoundary state={dehydratedState}>
      <Home
        productsQuery={productsQuery}
        bestProductsQuery={bestProductsQuery}
      />
    </HydrationBoundary>
  );
}

function Home({ productsQuery, bestProductsQuery }) {
  const [params, setParams] = useState(productsQuery);
  const [bestParams, setBestParams] = useState(bestProductsQuery);
  const [totalDataCount, setTotalDataCount] = useState(0);
  const handleChangeParams = (obj) => {
    setParams((prev) => ({
      ...prev,
      ...obj,
    }));
  };

  const handleChangeBestParams = (name, value) => {
    setBestParams((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const { data: bestProductData } = useQuery({
    queryKey: ["bestProduct", bestParams],
    queryFn: () => api.getProducts(bestParams),
  });

  const { data: productData } = useQuery({
    queryKey: ["Product", params],
    queryFn: () => api.getProducts(params),
  });

  const view = useWindowResize();

  // useEffect(() => {
  //   const changeFromNextView = () => {
  //     switch (view) {
  //       case "isDesktop":
  //         handleChangeParams({ pageSize: 10, page: 1 });
  //         handleChangeBestParams("pageSize", 4);
  //         break;
  //       case "isTablet":
  //         handleChangeParams({ pageSize: 6, page: 1 });
  //         handleChangeBestParams("pageSize", 2);
  //         break;
  //       case "isMobile":
  //         handleChangeParams({ pageSize: 4, page: 1 });
  //         handleChangeBestParams("pageSize", 1);
  //         break;
  //       default:
  //     }
  //   };
  //   changeFromNextView();
  // }, [view]);

  // useEffect(() => {
  //   setTotalDataCount(productData?.totalCount);
  // }, [productData]);

  return (
    <>
      <Head>
        <title>판다마켓</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className={styles.products_container}>
          <h2>베스트 상품</h2>
          <div className={styles.best_Products}>
            {bestProductData?.list.map((item) => (
              <Product key={item.id} itemValues={item} favorite={true} />
            ))}
          </div>
        </div>
        <div className={styles.products_container}>
          <SearchBar
            isMobile={view === "isMobile" ? true : false}
            orderBy={params.orderBy}
            onChange={handleChangeParams}
          />
          <div className={styles.Products}>
            {productData?.list.map((item) => (
              <Product key={item.id} itemValues={item} favorite={false} />
            ))}
          </div>
        </div>
        <Pagination
          onChange={handleChangeParams}
          params={params}
          totalCount={totalDataCount}
        />
      </main>
    </>
  );
}

export default HomeRouter;
