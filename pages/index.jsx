import Head from "next/head";
import ProductList from "@/components/ProductList";
import Pagination from "@/components/Pagination";
import SearchBar from "@/components/SearchBar";
import * as api from "@/pages/api/products.js";
import { useCallback, useEffect, useState } from "react";
import useWindowResize from "@/hooks/useWindowResize";

export async function getServerSideProps() {
  const productsQuery = {
    orderBy: "recent",
    page: 1,
    limit: 10,
  };

  const bestProductsQuery = {
    orderBy: "favorite",
    limit: 4,
  };

  let items = [];
  let productsTotalCount = 0;
  let bestItems = [];

  try {
    const { list, totalCount } = await api.getProductsAxios(productsQuery);
    items = list;
    productsTotalCount = totalCount;
  } catch (e) {
    console.log(e.message);
  }

  try {
    const { list } = await api.getProductsAxios(bestProductsQuery);
    bestItems = list;
  } catch (e) {
    console.log(e.message);
  }

  return {
    props: {
      items,
      bestItems,
      productsTotalCount,
      productsQuery,
      bestProductsQuery,
    },
  };
}

export default function Home({
  items,
  bestItems,
  productsTotalCount,
  productsQuery,
  bestProductsQuery,
}) {
  const [params, setParams] = useState(productsQuery);
  const [bestParams, setBestParams] = useState(bestProductsQuery);
  const [products, setProducts] = useState(items);
  const [bestProducts, setBestProducts] = useState(bestItems);
  const [totalDataCount, setTotalDataCount] = useState(productsTotalCount);

  const onChange = (name, value) => {
    setParams((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const onObjectChange = (obj) => {
    setParams((prev) => ({
      ...prev,
      ...obj,
    }));
  };

  const onBestChange = (name, value) => {
    setBestParams((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const loadProducts = useCallback(async () => {
    try {
      const { list, totalCount } = await api.getProductsAxios(params);
      setProducts(list);
      setTotalDataCount(totalCount);
    } catch (e) {
      console.log(e.message);
    }
  }, [params]);

  const loadBestProducts = useCallback(async () => {
    try {
      const { list } = await api.getProductsAxios(bestParams);
      setBestProducts(list);
    } catch (e) {
      console.log(e.message);
    }
  }, [bestParams]);

  const view = useWindowResize();

  useEffect(() => {
    loadProducts();
    loadBestProducts();
  }, [loadProducts, loadBestProducts]);

  useEffect(() => {
    const changeFromNextView = () => {
      switch (view) {
        case "isDesktop":
          onObjectChange({ limit: 10, page: 1 });
          onBestChange("limit", 4);
          break;
        case "isTablet":
          onObjectChange({ limit: 6, page: 1 });
          onBestChange("limit", 2);
          break;
        case "isMobile":
          onObjectChange({ limit: 4, page: 1 });
          onBestChange("limit", 1);
          break;
        default:
      }
    };
    changeFromNextView();
  }, [view]);

  return (
    <>
      <Head>
        <title>판다마켓</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="products_container">
          <h2>베스트 상품</h2>
          <ProductList items={bestProducts} favorite={true} />
        </div>
        <div className="products_container">
          <SearchBar
            isMobile={view === "isMobile" ? true : false}
            order={params.orderBy}
            onChange={onChange}
          />
          <ProductList items={products} favorite={false} />
        </div>
        <Pagination
          onChange={onChange}
          params={params}
          totalCount={totalDataCount}
        />
      </main>
    </>
  );
}
